@* This program is free software. It comes without any warranty, to the extent
 * permitted by applicable law. You can redistribute it and/or modify it under
 * the terms of the Do What The Fuck You Want To Public License, Version 2, as
 * published by Sam Hocevar. See http://www.wtfpl.net/ for more details. *@

@page "/secrets"
@using Zyrenth.Zora
@inject IZoraGenDetails ZoraGenDetails

@if (CurrentNpcs != null)
{
    if (ZoraGenDetails.Game == Game.Seasons && ZoraGenDetails.Animal == Animal.None)
    {
        <SoftlockWarning />
    }
    <div class="secret-wrapper">
        <div class="start-ring-wrapper">
            <h3>Secret to start game:</h3>
            <SecretContainer Bytes="@StartingSecretBytes" />
            <h3>Ring secret:</h3>
            <SecretContainer Bytes="@RingSecretBytes" />
        </div>
        <div class="memory-wrapper">
            <h3>Memories:</h3>
            <h6>Memory secrets can only be used AFTER you find the corresponding person in the game.</h6>
            @for (var i = 0; i < Length; ++i)
            {
                <MemoryContainer NpcName="@CurrentNpcs[i]" Bytes="@MemoryBytes[i]" />
            }
        </div>
    </div>
}

@functions {
    private static readonly string[] AgesNpcNames =
    {
        "Clock Shop",
        "Graveyard",
        "Subrosian",
        "Diver",
        "Smith",
        "Pirate",
        "Temple",
        "Deku",
        "Biggoron",
        "Ruul"
    };

    private static readonly string[] SeasonsNpcNames =
    {
        "King Zora",
        "Fairy",
        "Troy",
        "Plen",
        "Library",
        "Tokay",
        "Mamamu",
        "Tingle",
        "Elder",
        "Symmetry"
    };

    private const int Length = 10;

    string[] CurrentNpcs { get; set; }

    byte[][] MemoryBytes { get; set; }

    byte[][] StartingSecretBytes { get; set; }

    byte[][] RingSecretBytes { get; set; }

    protected override async Task OnInitAsync()
    {
        await ZoraGenDetails.InitAsync();
        var info = ZoraGenDetails.ToGameInfo();
        StartingSecretBytes = Utils.GenerateSecretChunks(new GameSecret(info).ToBytes());
        RingSecretBytes = Utils.GenerateSecretChunks(new RingSecret(info).ToBytes());
        var memories = new byte[Length][];
        for (var i = 0; i < Length; ++i)
        {
            memories[i] = new MemorySecret(info, (Memory) i, true).ToBytes();
        }
        MemoryBytes = memories;
        CurrentNpcs = ZoraGenDetails.Game == Game.Ages
            ? AgesNpcNames
            : SeasonsNpcNames;
    }
}
